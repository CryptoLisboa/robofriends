{"version":3,"sources":["containers/App/reducer.js","registerServiceWorker.js","containers/ErrorBoundry.js","containers/App/actions.js","constants_redux.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ErrorBoundry","props","hasError","info","this","setState","children","Component","requestRobots","dispatch","type","fetch","response","json","payload","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","placeholder","onChange","Scroll","style","overflow","border","height","store","connect","searchField","searchRobots","isPending","bindActionCreators","onSearchChange","e","target","value","onRequestRobots","useEffect","filteredRobots","filter","robot","toLowerCase","includes","rootReducer","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a318980.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCHIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from '../../constants_redux'\n\nexport const searchRobots = (state={\n    searchField: '',\n}, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHIELD:\n            return Object.assign({}, state, { ...state, searchField: action.payload })\n    \n        default:\n            return state\n    }\n}\n\nexport const requestRobots = (state={\n    robots: [],\n    isPending: false,\n    error: ''\n}, action={})=>{\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n\n        case REQUEST_ROBOTS_FAILED:\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { isPending: false, robots: action.payload })\n    \n        default:\n            return state\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n\n    render(){\n        return (\n            this.state.hasError \n                ? <h1>Something happened</h1>\n                : this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundry","import {\n    CHANGE_SEARCHIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from '../../constants_redux';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCHIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(payload=>dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload }))\n      .catch(payload=>dispatch({type: REQUEST_ROBOTS_FAILED, payload}))\n}","export const CHANGE_SEARCHIELD = 'CHANGE_SEARCHIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport ErrorBoundry from '../ErrorBoundry';\nimport { setSearchField, requestRobots } from './actions'\nimport CardList from '../../components/CardList';\nimport SearchBox from '../../components/SearchBox';\nimport Scroll from '../../components/Scroll';\nimport './App.css';\n\nconst mapStateToProps = ({\n  searchRobots:{searchField},\n  requestRobots:{robots,isPending, error}\n}) => ({ searchField, robots,isPending, error })\n\nconst mapDispatchToProps = (dispatch) => ({\n  ...bindActionCreators({\n    onSearchChange: e => setSearchField(e.target.value),\n    onRequestRobots: requestRobots\n  }, dispatch)\n})\n\nconst App = (props) => {\n  useEffect(() => {\n    props.onRequestRobots()\n  }, [])\n\n  const { searchField, onSearchChange, isPending, robots } = props;\n  const filteredRobots = robots.filter(robot =>{\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  })\n  return isPending ?\n    <h1>Loading...</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport invariant from 'redux-immutable-state-invariant'\nimport 'tachyons';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleWare from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport './index.css';\nimport { searchRobots, requestRobots } from './containers/App/reducer';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './containers/App/App';\n\n// root\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nlet store\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    store = createStore(rootReducer, composeWithDevTools({\n        trace: true,\n        traceLimit: 25,\n      })(\n        applyMiddleware(invariant(), thunkMiddleWare, createLogger()),\n        // other enhancers\n    ))\n} else {\n    store = createStore(rootReducer, applyMiddleware(thunkMiddleWare))\n}\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}