{"version":3,"sources":["containers/App/reducer.js","registerServiceWorker.js","containers/App/actions.js","constants_redux.js","containers/App/selector.js","util.js","components/SearchBox.jsx","components/Scroll.jsx","containers/ErrorBoundry.js","components/Card.jsx","components/CardList.jsx","components/App.jsx","containers/App/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","setSearchField","text","type","payload","requestRobots","dispatch","fetch","response","json","REQUEST_ROBOTS","getSearchField","path","getRobots","pathOr","getIsPending","getHasError","getFilteredRobots","createSelector","searchField","robots","filter","robot","toLowerCase","includes","getTargetValue","applyOnTargetValue","curryN","args","SearchBox","searchChange","className","placeholder","onChange","Scroll","children","style","overflow","border","height","ErrorBoundry","hasError","info","this","setState","props","Component","Card","name","email","id","alt","src","CardList","map","_","i","key","pick","AppUI","onSearchChange","isPending","filteredRobots","onRequestRobots","useEffect","connect","bindActionCreators","rootReducer","combineReducers","searchRobots","action","Object","assign","ReactDOM","render","store","createStore","applyMiddleware","thunkMiddleWare","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f1b406f8.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCHIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from '../../constants_redux'\n\nexport const searchRobots = (state={\n    searchField: '',\n}, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHIELD:\n            return Object.assign({}, state, { ...state, searchField: action.payload })\n    \n        default:\n            return state\n    }\n}\n\nexport const requestRobots = (state={\n    robots: [],\n    isPending: false,\n    error: ''\n}, action={})=>{\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n\n        case REQUEST_ROBOTS_FAILED:\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { isPending: false, robots: action.payload })\n    \n        default:\n            return state\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCHIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from '../../constants_redux';\n\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCHIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=>response.json())\n      .then(payload=>dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload }))\n      .catch(payload=>dispatch({type: REQUEST_ROBOTS_FAILED, payload}))\n}","export const CHANGE_SEARCHIELD = 'CHANGE_SEARCHIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","import { pathOr, path } from 'ramda'\nimport { createSelector } from 'reselect'\n\nconst REQUEST_ROBOTS = ['requestRobots']\nconst SEARCH_ROBOTS = ['searchRobots']\n\nconst getSearchField = path([...SEARCH_ROBOTS, 'searchField'])\nconst getRobots = pathOr([], [...REQUEST_ROBOTS, 'robots'])\nexport const getIsPending = path([...REQUEST_ROBOTS, 'isPending'])\nexport const getHasError = path([...REQUEST_ROBOTS, 'error'])\n\nexport const getFilteredRobots = createSelector(\n    [getSearchField,getRobots],\n    (searchField, robots) => robots.filter(\n        robot => \n            path(['name'], robot).toLowerCase()\n                .includes(searchField.toLowerCase())\n    )\n)\n","import { path, curryN } from 'ramda'\n\nconst getTargetValue = path(['target', 'value'])\n/*\nargs[0] => getTargetValue\nargs[1] => Fn() that receives the targetValue\nargs[2] => event: obj\n*/\nexport const applyOnTargetValue = curryN(\n    3, (...args) => args[1](args[0](args[2]))\n)(getTargetValue)","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = ({children}) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError: true })\n    }\n\n    render(){\n        return (\n            this.state.hasError \n                ? <h1>Something happened</h1>\n                : this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundry","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport { pick } from 'ramda'\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((_, i) => (\n          <Card\n            key={i}\n            {...pick(['id', 'name', 'email'], robots[i])}\n            />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { useEffect } from 'react'\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport ErrorBoundry from '../containers/ErrorBoundry';\nimport CardList from './CardList';\n\nconst AppUI = ({ onSearchChange, isPending, filteredRobots, onRequestRobots }) => {\n    useEffect(() => {\n      onRequestRobots()\n    }, [onRequestRobots])\n  \n    return isPending ?\n      <h1>Loading...</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n  }\n\n  export default AppUI","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { setSearchField, requestRobots } from './actions'\nimport './App.css';\nimport { getFilteredRobots, getIsPending, getHasError } from './selector';\nimport { applyOnTargetValue } from '../../util';\nimport AppUI from '../../components/App';\n\nconst mapStateToProps = state => ({\n  isPending: getIsPending(state),\n  error: getHasError(state),\n  filteredRobots: getFilteredRobots(state)\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  ...bindActionCreators({\n    onSearchChange: applyOnTargetValue(setSearchField),\n    onRequestRobots: requestRobots\n  }, dispatch)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppUI)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport invariant from 'redux-immutable-state-invariant'\nimport 'tachyons';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleWare from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport './index.css';\nimport { searchRobots, requestRobots } from './containers/App/reducer';\nimport registerServiceWorker from './registerServiceWorker';\nimport App from './containers/App/App';\n\n// root\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst getStore = () => !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n    ? createStore(rootReducer, composeWithDevTools({\n        trace: true,\n        traceLimit: 25,\n      })(\n        applyMiddleware(\n            invariant(),\n            thunkMiddleWare,\n            createLogger()\n        ),\n        // other enhancers\n    ))\n    : createStore(rootReducer, applyMiddleware(thunkMiddleWare))\n\nReactDOM.render(<Provider store={getStore()}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}